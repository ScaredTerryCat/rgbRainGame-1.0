#read line 128 (i did it because i worked on this project like 3 days,with like 3 days distance between them,so i did not remeber the name's of my variables to be able to reset them for the play again function)
#it is important
from time import sleep
from random import uniform,choice 
import pygame
pygame.init()
#pygame.font.init()
font=pygame.font.Font(None,36)
score=0
health=3
white=(255,255,255)
playerColor=white
font=pygame.font.Font(None,50)
red=(255,0,0)
green=(0,255,0)
blue=(0,0,255)
black=(0,0,0)
gray=(125,125,125)
window=pygame.display.set_mode((800,600),pygame.RESIZABLE)
rgb=[red,green,blue]

def drawGround(groundHeight=100):
	windowWidth,windowHeight=window.get_size() 
	groundY=windowHeight-groundHeight
	pygame.draw.rect(window,black,[0,groundY,windowWidth,groundHeight])

xPlayer=0
playerWidth=100
playerHeight=100

def getPlayerY(groundHeight=100):
	windowWidth,windowHeight=window.get_size()
	playerY=windowHeight-groundHeight-playerHeight
	return playerY
def drawPlayer(playerColor=white):
	pygame.draw.rect(window,playerColor,[xPlayer,getPlayerY(),playerWidth,playerHeight])

deltaX=1
sloweness=0.003
running=True
rainWidth=20 
rainHeight=100
rainsLen=10
rains=[]
def drawRain(rain):
	x=rain[0]
	if(x!=-200):
		y=rain[1]
		color=rain[2]
		pygame.draw.rect(window,color,[x,y,rainWidth,rainHeight])
def drawRains(rains):
	for rain in rains:
		drawRain(rain)
def getX(xList,minDistance=playerWidth+40):
	windowWidth=window.get_size()[0]
	count=0
	while True:
		x=uniform(0,windowWidth-rainWidth) 
		if all(abs(x-i)>=minDistance for i in xList):
			return x 
		count+=1
		if(count==100):
			return -200
def configureRains(rains,heal=1):
	l=len(rains)
	if(l>=rainsLen):
		return rains 
	complement=rainsLen-l 
	xList=[]
	yList=[]
	colorList=[]
	for i in range(complement):
		x=getX(xList) 
		xList.append(x)
		y=0-rainHeight
		yList.append(y)
	for i in range(complement-1):
		color=choice(rgb) 
		colorList.append(color)
	color=choice([blue,red])
	if(heal%3==0):
		color=choice([red,green])
	colorList.append(color)

	for i in range(complement):
		x=xList[i]
		y=yList[i]
		color=colorList[i]
		rains.append([x,y,color])

	return rains
rains=configureRains(rains)
heal=1
def moveRain(rain,fallDistance=1):
	y=rain[1]
	y+=fallDistance 
	rain[1]=y 
	return rain
def moveRains(rains,fallDistance=1,health=health,score=score,playerColor=playerColor,heal=1):
	windowHeight=window.get_size()[1]
	result=[]
	for rain in rains:
		rain=moveRain(rain,fallDistance)
		y=rain[1]
		x=rain[0]
		color=rain[2]
		groundHeight=100
		yPlayer=getPlayerY()
		playerRect=pygame.Rect([xPlayer,yPlayer,playerWidth,playerHeight])
		rainRect=pygame.Rect([x,y,rainWidth,rainHeight])
		if playerRect.colliderect(rainRect):
			if(color==blue):
				score+=1
				playerColor=blue
			elif(color==green):
				health+=1
				playerColor=green
			else:
				health-=1
				playerColor=red
		elif(y+rainHeight<windowHeight-groundHeight):
			result.append(rain) 
		else:
			pass
	result=[configureRains(result,heal),health,score,playerColor]
	return result
fallDistance=1
stopper=False
fallCount=1
#THE PLAY AGAIN FUNCION WAS GENERATED BY CHAT GPT,BUT I NEEDED TO CHANGE variable deltaX from 5 to 1 
#Because the player was moving to fast i think

def playAgain():
    # Reset game variables
    global xPlayer, deltaX, health, score, rains, fallDistance, stopper, heal, playerColor, running
    xPlayer = 0  # Initial position of the player
    deltaX = 1  # Reset player speed, ensure it's not 0
    health = 3
    score = 0
    playerColor = white
    fallDistance = 1
    stopper = False
    heal = 1
    running = True
    
    # Configure rains
    rains = configureRains([])

    # Main game loop
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT:
                    deltaX = abs(deltaX)  # Move right
                elif event.key == pygame.K_LEFT:
                    deltaX = -abs(deltaX)  # Move left

        # Update player position
        xPlayer += deltaX
        windowWidth, windowHeight = window.get_size()
        
        # Boundary check for player position
        if xPlayer + playerWidth >= windowWidth or xPlayer <= 0:
            xPlayer -= deltaX  # Revert movement if out of bounds

        # Move rains and update health and score
        r = moveRains(rains, fallDistance, health, score, playerColor, heal)
        heal += 1
        rains, health, score, playerColor = r[0], r[1], r[2], r[3]

        # Check for game over
        if health == 0:
            running = False
            noExit = True
            while noExit:
                window.fill(black)
                loseText = font.render(f"Game over. Your score is {score}", True, red, black)
                retryText = font.render("Press ENTER to try again", True, green, black)
                loseRect = loseText.get_rect(center=(windowWidth/2, windowHeight/2))
                retryRect = retryText.get_rect(center=(windowWidth/2, windowHeight/2 + 50))
                window.blit(loseText, loseRect)
                window.blit(retryText, retryRect)
                pygame.display.update()
                
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        noExit = False
                    elif event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                        playAgain()  # Restart game
            quit()
            break  # Exit loop if game over and no restart

        # Increase fall speed periodically
        if score % 2 == 0 and score != 0 and not stopper:
            fallDistance += 0.001
            stopper = True
        else:
            stopper = False

        # Render elements
        window.fill(gray)
        drawGround()
        drawPlayer(playerColor)
        drawRains(rains)
        
        # Display health and score
        healthText = font.render(f"Health: {health}", True, white, black)
        scoreText = font.render(f"Score: {score}", True, white, black)
        window.blit(healthText, (10, 10))
        window.blit(scoreText, (200, 10))
        pygame.display.update()
        
        # Delay to control speed
        sleep(sloweness)

while running:
	for event in pygame.event.get():
		if event.type==pygame.QUIT:
			running=False
		elif event.type==pygame.KEYDOWN:
			if event.key==pygame.K_RIGHT:
				if deltaX<0:
					deltaX*=-1 
			elif event.key==pygame.K_LEFT:
				if deltaX>0:
					deltaX*=-1 
			else:
				pass
	xPlayer+=deltaX
	windowWidth,windowHeight=window.get_size()
	if(xPlayer+playerWidth>=windowWidth or xPlayer<=0):
		xPlayer-=deltaX  
		deltaX*=-1
	r=moveRains(rains,fallDistance,health,score,playerColor,heal)
	heal+=1
	rains=r[0]
	health=r[1]
	score=r[2]
	playerColor=r[3]
	if(health==0):
		running=False
		noExit=True
		while noExit:
			window.fill(black)
			loseText=font.render(f"Game over.Your score is {score}",True,red,black)
			retryText=font.render("Press ENTER to try again",True,green,black)
			windowWidth,windowHeight=window.get_size()
			loseRect=loseText.get_rect(center=(windowWidth/2,windowHeight/2))
			retryRect=retryText.get_rect(center=(windowWidth/2,windowHeight/2+50))
			window.blit(loseText,loseRect) 
			window.blit(retryText,retryRect)
			pygame.display.update()
			for event in pygame.event.get():
				if event.type==pygame.QUIT:
					noExit=False
					break
				elif event.type==pygame.KEYDOWN:
					if event.key==pygame.K_RETURN:
						playAgain()  
				else:
					pass
		quit() #this prevents recursion "back" :)
		break
	if(score%2==0 and score!=0 and stopper==False):
		fallDistance+=0.001
		stopper=True

	else:
		stopper=False
	window.fill(gray)
	drawGround()
	drawPlayer(playerColor)
	drawRains(rains)
	healthText=font.render(f"Health: {health}",True,white,black)
	scoreText=font.render(f"Score: {score}",True,white,black)
	healthRect=healthText.get_rect(topleft=(10,10))
	scoreRect=scoreText.get_rect(topleft=(200,10))
	window.blit(healthText,healthRect)
	window.blit(scoreText,scoreRect)
	pygame.display.update()
	sleep(sloweness)


